package com.example.nfc.Models;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NFC_TRANSACTION".
*/
public class NfcTransactionDao extends AbstractDao<NfcTransaction, Long> {

    public static final String TABLENAME = "NFC_TRANSACTION";

    /**
     * Properties of entity NfcTransaction.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property TransactionNo = new Property(0, Long.class, "TransactionNo", true, "_id");
        public final static Property InsertDate = new Property(1, java.util.Date.class, "InsertDate", false, "INSERT_DATE");
        public final static Property BalanceNo = new Property(2, int.class, "BalanceNo", false, "BALANCE_NO");
        public final static Property OldBalance_USD = new Property(3, int.class, "OldBalance_USD", false, "OLD_BALANCE__USD");
        public final static Property NewBalance_USD = new Property(4, int.class, "NewBalance_USD", false, "NEW_BALANCE__USD");
        public final static Property NewBalance_EUR = new Property(5, Double.class, "NewBalance_EUR", false, "NEW_BALANCE__EUR");
        public final static Property ExchangeRate = new Property(6, Double.class, "ExchangeRate", false, "EXCHANGE_RATE");
    }


    public NfcTransactionDao(DaoConfig config) {
        super(config);
    }
    
    public NfcTransactionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NFC_TRANSACTION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: TransactionNo
                "\"INSERT_DATE\" INTEGER," + // 1: InsertDate
                "\"BALANCE_NO\" INTEGER NOT NULL ," + // 2: BalanceNo
                "\"OLD_BALANCE__USD\" INTEGER NOT NULL ," + // 3: OldBalance_USD
                "\"NEW_BALANCE__USD\" INTEGER NOT NULL ," + // 4: NewBalance_USD
                "\"NEW_BALANCE__EUR\" REAL," + // 5: NewBalance_EUR
                "\"EXCHANGE_RATE\" REAL);"); // 6: ExchangeRate
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_NFC_TRANSACTION__id ON \"NFC_TRANSACTION\"" +
                " (\"_id\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NFC_TRANSACTION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NfcTransaction entity) {
        stmt.clearBindings();
 
        Long TransactionNo = entity.getTransactionNo();
        if (TransactionNo != null) {
            stmt.bindLong(1, TransactionNo);
        }
 
        java.util.Date InsertDate = entity.getInsertDate();
        if (InsertDate != null) {
            stmt.bindLong(2, InsertDate.getTime());
        }
        stmt.bindLong(3, entity.getBalanceNo());
        stmt.bindLong(4, entity.getOldBalance_USD());
        stmt.bindLong(5, entity.getNewBalance_USD());
 
        Double NewBalance_EUR = entity.getNewBalance_EUR();
        if (NewBalance_EUR != null) {
            stmt.bindDouble(6, NewBalance_EUR);
        }
 
        Double ExchangeRate = entity.getExchangeRate();
        if (ExchangeRate != null) {
            stmt.bindDouble(7, ExchangeRate);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NfcTransaction entity) {
        stmt.clearBindings();
 
        Long TransactionNo = entity.getTransactionNo();
        if (TransactionNo != null) {
            stmt.bindLong(1, TransactionNo);
        }
 
        java.util.Date InsertDate = entity.getInsertDate();
        if (InsertDate != null) {
            stmt.bindLong(2, InsertDate.getTime());
        }
        stmt.bindLong(3, entity.getBalanceNo());
        stmt.bindLong(4, entity.getOldBalance_USD());
        stmt.bindLong(5, entity.getNewBalance_USD());
 
        Double NewBalance_EUR = entity.getNewBalance_EUR();
        if (NewBalance_EUR != null) {
            stmt.bindDouble(6, NewBalance_EUR);
        }
 
        Double ExchangeRate = entity.getExchangeRate();
        if (ExchangeRate != null) {
            stmt.bindDouble(7, ExchangeRate);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public NfcTransaction readEntity(Cursor cursor, int offset) {
        NfcTransaction entity = new NfcTransaction( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // TransactionNo
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // InsertDate
            cursor.getInt(offset + 2), // BalanceNo
            cursor.getInt(offset + 3), // OldBalance_USD
            cursor.getInt(offset + 4), // NewBalance_USD
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // NewBalance_EUR
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6) // ExchangeRate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NfcTransaction entity, int offset) {
        entity.setTransactionNo(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setInsertDate(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setBalanceNo(cursor.getInt(offset + 2));
        entity.setOldBalance_USD(cursor.getInt(offset + 3));
        entity.setNewBalance_USD(cursor.getInt(offset + 4));
        entity.setNewBalance_EUR(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setExchangeRate(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(NfcTransaction entity, long rowId) {
        entity.setTransactionNo(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(NfcTransaction entity) {
        if(entity != null) {
            return entity.getTransactionNo();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(NfcTransaction entity) {
        return entity.getTransactionNo() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
